/* Compile:  gcc -pthread matrix_mul_pthreads.c -o matmul
   Run:      ./matmul
   (uses fixed N=3; edit N or read from stdin if desired)           */

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define N 3                       /* dimension of square matrices */

/* ------------ global matrices ------------ */
int A[N][N] = { {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9} };

int B[N][N] = { {9, 8, 7},
                {6, 5, 4},
                {3, 2, 1} };

int C[N][N];                      /* result filled by main thread */

/* ------------ thread argument ------------ */
typedef struct {
    int row;
    int col;
} Cell;

/* ------------ worker function ------------ */
void *compute_cell(void *arg)
{
    Cell *cell = (Cell *)arg;
    int i = cell->row;
    int j = cell->col;
    free(cell);                   /* no longer needed */

    int sum = 0;
    for (int k = 0; k < N; ++k)
        sum += A[i][k] * B[k][j];

    /* return sum via pthread_exit */
    int *ret = malloc(sizeof(int));
    if (!ret) { perror("malloc"); pthread_exit(NULL); }
    *ret = sum;
    pthread_exit(ret);
}

/* ------------ main ------------ */
int main(void)
{
    pthread_t tid[N][N];

    /* create one thread per C[i][j] */
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            Cell *cell = malloc(sizeof(Cell));
            if (!cell) { perror("malloc"); exit(EXIT_FAILURE); }
            cell->row = i;
            cell->col = j;
            if (pthread_create(&tid[i][j], NULL, compute_cell, cell) != 0) {
                perror("pthread_create");
                exit(EXIT_FAILURE);
            }
        }
    }

    /* join threads and collect results */
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            int *value;
            if (pthread_join(tid[i][j], (void **)&value) != 0) {
                perror("pthread_join");
                exit(EXIT_FAILURE);
            }
            C[i][j] = *value;     /* store in result matrix */
            free(value);          /* free heap memory from thread */
        }
    }

    /* display matrices and result */
    printf("Matrix A:\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) printf("%4d", A[i][j]);
        printf("\n");
    }

    printf("\nMatrix B:\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) printf("%4d", B[i][j]);
        printf("\n");
    }

    printf("\nA x B (result):\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) printf("%4d", C[i][j]);
        printf("\n");
    }
    return 0;
}

